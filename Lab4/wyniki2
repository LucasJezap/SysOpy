Ponizej prezentuje wyniki eksperymentu dotyczacego dziedziczenia dyspozycji do sygnalow po uzyciu funkcji fork oraz exec.

-------------------------------------------------------------------------------------

                            WYNIKI I WNIOSKI DLA FORK

-------------------------------------------------------------------------------------
Jak widac ponizej, jezeli zignorujemy sygnal w procesie macierzystym, to w nowym
procesie potomnym wytworzonym przy pomocy fork() ustawienia dla ignorowania sygnalow
sa takie same. Ignorujac zatem sygnal, ignorujemy go rowniez w kazdym procesie 
wytworzonym przez fork().
-------------------------------------------------------------------------------------

IGNORE
Now testing for parent process:
The parent process is still running so ignoring the signal SIGUSR1 worked!
Now testing for child process:
The child process is still running so ignoring the signal SIGUSR1 worked!

-------------------------------------------------------------------------------------
Jak widac ponizej, jezeli przypiszemy danemu sygnalowi handler go obslugujacy
w procesie macierzystym, to w nowym procesie potomnym wytworzonym przy pomocy fork() 
sygnal jest obslugiwany przez ten sam handler. Przypisujac zatem sygnalowi handler,
bedzie on zwiazany z takim samym handlerem w kazdym procesie wytworzonym przez fork().
-------------------------------------------------------------------------------------

HANDLER
Now testing for parent process:
Signal SIGUSR1 was catched
Now testing for child process:
Signal SIGUSR1 was catched

-------------------------------------------------------------------------------------
Jak widac ponizej, jezeli zablokujemy (dodamy go do maski) sygnal w procesie macierzystym,
to w nowym procesie potomnym wytworzonym przy pomocy fork() ustawienia maski sygnalu
sa takie same. Blokujac zatem sygnal, blokujemy go rowniez w kazdym procesie 
wytworzonym przez fork().
-------------------------------------------------------------------------------------

MASK
Now testing for parent process:
The parent process is still running so blocking the signal SIGUSR1 worked!
Now testing for child process:
The child process is still running so blocking the signal SIGUSR1 worked!

-------------------------------------------------------------------------------------
Jak widac ponizej, sygnal zaraz po zablokowaniu w procesie macierzystym nie jest widoczny
jako sygnal oczekujacy, lecz dopiero po dostaniu takiego sygnalu (np. poprzez raise()).
Natomiast proces potomny wytworzony przy pomocy fork() otrzymuje taka sama maske 
sygnalu, ale sygnal nie bedzie tam widoczny jako sygnal oczekujacy. Dopiero po
dostaniu takiego sygnalu (np. poprzez raise()) proces potomny bedzie widzial dany sygnal
jako sygnal oczekujacy.
-------------------------------------------------------------------------------------

PENDING
Now testing for parent process:
Signal SIGUSR1 is not in pending state in the parent process after adding him to mask
After raising, signal SIGUSR1 is in pending state in the parent process
Now testing for child process:
Signal SIGUSR1 is not in pending state in the child process after being raised in parent process
After raising in child process, signal SIGUSR1 is in pending state in the child process

-------------------------------------------------------------------------------------
                        PODSUMOWANIE DOTYCZACE FORK()
-------------------------------------------------------------------------------------
Proces potomny wytworzony przy pomocy fork() dziedziczy po procecie macierzystym
ustawienia dotyczace ignorowania sygnalow, handlery obslugujacy te sygnaly oraz
maski sygnalow. Nie dziedziczy natomiast informacji o sygnalach oczekujacych.
-------------------------------------------------------------------------------------

                            WYNIKI I WNIOSKI DLA EXEC

-------------------------------------------------------------------------------------
Jak widac ponizej, jezeli zignorujemy sygnal w procesie, to po uzyciu komendy exec
ustawienia dla ignorowania sygnalow sa takie same. Ignorujac zatem sygnal, 
ignorujemy go rowniez po uzyciu komendy exec. Dzialajacy program po wykonaniu exec
zostaje zastapiony przez nowy program, ktory pamieta ustawienia ignorowania sygnalow.
-------------------------------------------------------------------------------------

IGNORE
Now testing for process before exec:
The process is still running so ignoring the signal SIGUSR1 worked!
Now testing after using function exec:
The process is still running so ignoring the signal SIGUSR1 worked!

-------------------------------------------------------------------------------------
Jak widac ponizej, jezeli zablokujemy sygnal w procesie (dodamy go do maski), to po 
uzyciu komendy exec ustawienia maski sygnalow sa takie same. Dodajac zatem sygnal do maski, 
bedzie on nadal w masce po uzyciu komendy exec. Dzialajacy program po wykonaniu exec
zostaje zastapiony przez nowy program, ktory pamieta ustawienia maski sygnalow.
-------------------------------------------------------------------------------------

MASK
Now testing for process before exec:
The process is still running so blocking the signal SIGUSR1 worked!
Now testing after using function exec:
The process is still running so blocking the signal SIGUSR1 worked!

-------------------------------------------------------------------------------------
Jak widac ponizej, sygnal zaraz po zablokowaniu w procesie nie jest widoczny
jako sygnal oczekujacy, lecz dopiero po dostaniu takiego sygnalu (np. poprzez raise()).
Natomiast program po zamianie na inny program uzywajac komendy exec ma nie tylko takie same
maski sygnalow, ale rowniez te same sygnalu oczekujace. Nie jest potrzebne zatem uzycie
raise() by sygnal pojawil sie w zbiorze sygnalow oczekujacych. 
-------------------------------------------------------------------------------------

PENDING
Now testing for process before exec:
Signal SIGUSR1 is not in pending state in the process after adding him to mask
After raising, signal SIGUSR1 is in pending state in the process
Now testing after using function exec:
Signal SIGUSR1 is in pending state in the process after being raised before exec command
After raising in process after exec, signal SIGUSR1 is in pending state in the process

-------------------------------------------------------------------------------------
                            PODSUMOWANIE DOTYCZACE EXEC()
-------------------------------------------------------------------------------------
Proces po uzyciu komendy exec zapamietuje zarowno ignorowane sygnaly jak i maski 
sygnalow oraz oczekujace (wiszace) sygnaly. Warto dodac ze po wykonaniu komendy exec
nie przetrwa zaden handler do obslugiwania sygnalow, poniewaz komenda exec reinicjalizuje
segmenty kodu, danych oraz stosu.
-------------------------------------------------------------------------------------